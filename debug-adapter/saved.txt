std::string Debugger::evaluateExpression(const std::string &expression)
{
    std::lock_guard<std::mutex> lock(debugMutex);
    HRESULT hr;
    hr = debugControl->Execute(DEBUG_OUTCTL_THIS_CLIENT, "n 10", DEBUG_EXECUTE_DEFAULT);
    hr = debugControl->SetExpressionSyntax(DEBUG_EXPR_MASM);

    std::string dataType, varName;
    int numElements = 0;
    char format = 0;

    std::string parseError = parseArrayExpressionParameters(expression, dataType, varName, numElements, format);

    if (parseError.empty()) {
        if (!format) {
            format = 'h';
        }
        bool printArray = true;
        if (!numElements) {
            numElements = 1;
            printArray = false;
        }

        int elementSize;
        if (dataType == "by") {
            elementSize = 1; // byte
        } else if (dataType == "wo") {
            elementSize = 2; // word (2 bytes)
        } else if (dataType == "dwo") {
            elementSize = 4; // double word (4 bytes)
        } else {
            return "<Invalid data type prefix>";
        }

        if (format == 'c' && dataType != "by") {
            return "<Char format (c) can only be applied to bytes (by)>";
        }

        DEBUG_VALUE baseValue;
        hr = debugControl->Evaluate(varName.c_str(), DEBUG_VALUE_INVALID, &baseValue, nullptr);

        if (FAILED(hr) || baseValue.Type != DEBUG_VALUE_INT64) {
            return "<Invalid base address for variable>";
        }
        ULONG64 baseAddress = baseValue.I64;

        std::vector<uint8_t> memoryData(numElements * elementSize);
        ULONG bytesRead = 0;
        hr = debugDataSpaces->ReadVirtual(baseAddress, memoryData.data(), numElements * elementSize, &bytesRead);
        if (FAILED(hr) || bytesRead < numElements * elementSize) {
            return "<Failed to read memory>";
        }

        std::string result = "";
        if (printArray) {
            result = "{ ";
        }
        char buffer[64];

        for (int i = 0; i < numElements; ++i) {
            formatMemoryValue(elementSize, memoryData, i, format);
            result += buffer;
            if (i < numElements - 1) {
                result += ", ";
            }
        }
        if (printArray) {
            result += " }";
        }
        return result;
    }

    // parseError = parseExpressionParameters(expression, varName, format);
    // if (parseError.empty()) {
    //     DEBUG_VALUE value = {};
    //     hr = debugControl->Evaluate(expression.c_str(), DEBUG_VALUE_INVALID, &value, nullptr);
    //     if (FAILED(hr)) {
    //         return "<Invalid expression>";
    //     }

    //     char buffer[128];
    //     if (format == 'h') {
    //         sprintf_s(buffer, sizeof(buffer), "0x%08x", value.I32);
    //     } else if (format == 'd') {
    //         sprintf_s(buffer, sizeof(buffer), "%d", value.I32);
    //     } else if (format == 'b') {
    //         std::string binaryStr = std::bitset<32>(value.I32).to_string();
    //         for (int j = 24; j > 0; j -= 8) { // Group bits into bytes (8 bits)
    //             binaryStr.insert(j, " ");
    //         }
    //         sprintf_s(buffer, sizeof(buffer), "0b%s", binaryStr.c_str());
    //     }
    //     std::string result = "";
    //     result += buffer;
    //     return result;
    // }

    // Standard single expression evaluation if no special format is matched
    DEBUG_VALUE value = {};
    hr = debugControl->Evaluate(expression.c_str(), DEBUG_VALUE_INVALID, &value, nullptr);
    if (FAILED(hr)) {
        return "<Invalid expression>";
    }

    char buffer[128];
    if (value.Type == DEBUG_VALUE_INT64) {
        sprintf_s(buffer, sizeof(buffer), "0x%llx", value.I64);
    } else if (value.Type == DEBUG_VALUE_INT32) {
        sprintf_s(buffer, sizeof(buffer), "0x%lx", value.I32);
    } else {
        sprintf_s(buffer, sizeof(buffer), "<unsupported type>");
    }

    return buffer;
}